[ { "title": "NginxとDjangoでShibboleth認証を実装する", "url": "/posts/2024-03-21-shibboleth-nginx-django/", "categories": "web", "tags": "django, shibboleth, wip", "date": "2024-03-21 00:00:00 +0900", "snippet": "", "content": "" }, { "title": "[wip] Breaching Active Directory", "url": "/posts/2024-03-06-breachingad/", "categories": "tryhackme", "tags": "ad, thm, wip", "date": "2024-03-06 00:00:00 +0900", "snippet": "邦訳: Active Directoryへの侵入ADの設定ミスをついて特権昇格や横断的移動、目的実行などを行うにはまず、初期アクセスが必要となる。このRoomでは、ADに侵入するための方法をいくつか紹介する。 NTLM認証サービス LDAPバインド資格情報 認証リレー Microsoft Deployment Toolkit 設定ファイルTask 1: Introduction t...", "content": "邦訳: Active Directoryへの侵入ADの設定ミスをついて特権昇格や横断的移動、目的実行などを行うにはまず、初期アクセスが必要となる。このRoomでは、ADに侵入するための方法をいくつか紹介する。 NTLM認証サービス LDAPバインド資格情報 認証リレー Microsoft Deployment Toolkit 設定ファイルTask 1: Introduction to AD Breachesまずは、ネットワーク内の特定のサーバーやリソースにアクセスするために必要な名前解決を行う設定から始める。これにより、ドメイン名をIPアドレスに変換し、ネットワーク通信の正しいルーティングを確保する。下記のコマンドは、この名前解決プロセスを設定するために使用され、THMDCIP変数には、TryHackMeのドメインコントローラーのIPアドレスが格納され、このアドレスがDNSサーバーとして機能する。これにより、za.tryhackme.comドメイン内のホストに対するクエリが正確に解決され、タスクやチャレンジに必要なネットワークリソースへのアクセスが可能になる。$ THMDCIP=10.200.28.101$ systemd-resolve --interface breachad --set-dns $THMDCIP --set-domain za.tryhackme.com コマンド部分 説明 systemd-resolve DNS設定やクエリ実行に関するコマンドラインツール –interface breachad 操作を適用するネットワークインターフェースを指定 –set-dns $THMDCIP 使用するDNSサーバーのIPアドレスを設定 –set-domain za.tryhackme.com 検索ドメインを設定 ※ 検索ドメイン: FQDNではないホスト名に対して自動的に追加されるドメイン。 I have completed the AD basics room and am ready to learn about AD breaching techniques. No answer needed I have connected to the network and configured DNS. No answer needed Task2: OSINT and Phishing I understand OSINT and how it can be used to breach AD(ADを侵害するために使用できるOSINTを理解している) No answer needed I understand Phishing and how it can be used to breach AD(ADを侵害するために使用できるフィッシングを理解している) No answer needed What popular website can be used to verify if your email address or password has ever been exposed in a publicly disclosed data breach?(自分のメールアドレスやパスワードが、一般に公開されたデータ流出事件で流出したことがあるかどうかを確認するために、人気のあるウェブサイトはなんだろうか？) HaveIBeenPwned Task 3: NTLM Authenticated Services What is the name of the challenge-response authentication mechanism that uses NTLM?(NTLMを使用したチャレンジ-レスポンス認証メカニズムの名前は何か？) NetNtlm What is the username of the third valid credential pair found by the password spraying script?(パスワードスプレーのスクリプトで見つかった3番目の有効な資格情報のユーザー名は何か？) gordon.stevens How many valid credentials pairs were found by the password spraying script?(パスワードスプレーのスクリプトで見つかった有効な資格情報のペアは何組か？) 4 What is the message displayed by the web application when authenticating with a valid credential pair?(有効な資格情報のペアで認証すると、Webアプリケーションに表示されるメッセージは何か？) Hello World Task 4: LDAP Bind Credentials What type of attack can be performed against LDAP Authentication systems not commonly found against Windows Authentication systems? LDAP Pass-back Attack What two authentication mechanisms do we allow on our rogue LDAP server to downgrade the authentication and make it clear text? LOGIN,PLAIN What is the password associated with the svcLDAP account? tryhackmeldappass1@ Task 5: Authentication Relay What is the name of the tool we can use to poison and capture authentication requests on the network? Responder What is the username associated with the challenge that was captured? svcFileCopy What is the value of the cracked password associated with the challenge that was captured? FPassword1! Task 6: Microsoft Deployment Toolkit What Microsoft tool is used to create and host PXE Boot images in organisations? Microsoft Deployment Toolkit What network protocol is used for recovery of files from the MDT server? TFTP What is the username associated with the account that was stored in the PXE Boot image? svcMDT What is the password associated with the account that was stored in the PXE Boot image? PXEBootSecure1@ While you should make sure to cleanup you user directory that you created at the start of the task, if you try you will notice that you get an access denied error. Don’t worry, a script will help with the cleanup process but remember when you are doing assessments to always perform cleanup. No answer needed Task 7: Configuration Files What type of files often contain stored credentials on hosts? Configuration Files What is the name of the McAfee database that stores configuration including credentials used to connect to the orchestrator? ma.db What table in this database stores the credentials of the orchestrator? AGENT_REPOSITORIES What is the username of the AD account associated with the McAfee service? svcAV What is the password of the AD account associated with the McAfee service? MyStrongPassword! Task 8: Conclusion I understand how configuration changes can help prevent AD breaches. No answer needed " }, { "title": "OG画像を動的に生成する", "url": "/posts/2024-02-29-generate-og/", "categories": "web", "tags": "front, js", "date": "2024-02-29 00:00:00 +0900", "snippet": "Twitter で見かける、技術系記事を自サイトでホストしている人達は華やかな OG 画像を載せている。実際、リンクを共有したときに表示されるのであれば記事の内容が一目でわかる。このサイトは Jekyll で生成しており、Github Actions+Ruby で OG 画像を生成するとデプロイに非常に時間がかかるため、satoriと@resvg/resvg-jsを用いて OG 画像を生成す...", "content": "Twitter で見かける、技術系記事を自サイトでホストしている人達は華やかな OG 画像を載せている。実際、リンクを共有したときに表示されるのであれば記事の内容が一目でわかる。このサイトは Jekyll で生成しており、Github Actions+Ruby で OG 画像を生成するとデプロイに非常に時間がかかるため、satoriと@resvg/resvg-jsを用いて OG 画像を生成する方法を考えた。環境@resvg/resvg-js 2.6.0gray-matter 4.0.3satori 0.10.13satori-html 0.3.2実装markdown ファイルは以下のように、frontmatter を事前に設定しておく。---title: sampleslug: 2024-02-29-sampletags: - sample - test---slug は記事の URL になる他、OG 画像のファイル名にもなる。また、tags は OG 画像の説明に使う。以下のスクリプトは、\\_posts ディレクトリにあるファイルを読み込み、frontmatter を元に OG 画像を生成する。import { readdir, readFile, writeFile } from \"fs/promises\";import { join } from \"path\";import matter from \"gray-matter\";import { Resvg } from \"@resvg/resvg-js\";import { html } from \"satori-html\";import satori from \"satori\";const dir = \"./_posts\";try { const files = await readdir(dir); for (const file of files) { const content = await readFile(join(dir, file), \"utf8\"); const result = matter(content); await generateOgImage({ title: result.data.title, slug: result.data.slug.toLowerCase(), description: result.data.tags ? result.data.tags.join(\", \") : \"\", }); }} catch (err) { console.error(\"Error:\", err);}async function generateOgImage({ title, slug, description }) { const svg = await satori( html` &lt;style&gt; div { display: flex; } .wrapper { display: flex; flex-direction: column; background-color: #0f0d0e; height: 630px; padding: 80px; } .top { display: flex; justify-content: space-between; align-items: center; } .bottom { display: flex; flex-direction: column; justify-content: flex-end; flex-basis: 100%; width: 90%; padding-bottom: 40px; } .install { font-size: 32px; font-family: \"Fira Code\"; color: #f9f4da; } .install span { color: #0ba95b; padding-right: 16px; } .title { margin-top: 16px; font-size: 64px; font-family: \"Zen Kaku Gothic New\"; font-weight: 400; color: #12b5e5; word-break: auto-phrase; } .description { margin-top: 16px; font-family: \"Outfit\"; font-size: 40px; font-weight: 400; color: #f9f4da; } &lt;/style&gt; &lt;div class=\"wrapper\"&gt; &lt;div class=\"top\"&gt; &lt;div class=\"install\"&gt;&lt;span&gt;&gt;&lt;/span&gt; pnpm i @r74tech/blog&lt;/div&gt; &lt;/div&gt; &lt;div class=\"bottom\"&gt; &lt;div class=\"title\"&gt;${title}&lt;/div&gt; &lt;div class=\"description\"&gt;${description}&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;`, { fonts: [ { name: \"Outfit\", data: await readFile( new URL(\"./assets/fonts/outfit-regular.ttf\", import.meta.url) ), weight: \"400\", style: \"normal\", }, { name: \"Fira Code\", data: await readFile( new URL(\"./assets/fonts/firacode-regular.ttf\", import.meta.url) ), weight: \"400\", style: \"normal\", }, { name: \"Zen Kaku Gothic New\", data: await readFile( new URL( \"./assets/fonts/ZenKakuGothicNew-Regular.ttf\", import.meta.url ) ), weight: \"400\", style: \"normal\", }, ], width: 1200, height: 630, } ); const resvg = new Resvg(svg, { fitTo: { mode: \"original\", }, }); const pngData = resvg.render(); const pngBuffer = pngData.asPng(); await writeFile( new URL(`./assets/img/og/${slug}.png`, import.meta.url), pngBuffer );}Jekyll 側の対応このブログのテーマ側で、jekyll-seo-tagが使われているため、frontmatter にimageを追加することで OG 画像を指定できる。ただし、画像を追加すると記事の初めに画像が表示されるため、_layouts/post.htmlを修正する必要がある。該当コードこのブログでは、showを追加して OG 画像を表示するかどうかを指定できるようにした。参考文献 HonoX で satori を使って OG イメージも SSG する" }, { "title": "first", "url": "/posts/2024-02-28-first/", "categories": "uncategorized", "tags": "", "date": "2024-02-28 03:00:00 +0900", "snippet": "init", "content": "init" } ]
